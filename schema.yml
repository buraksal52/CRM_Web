openapi: 3.0.3
info:
  title: CRM API
  version: 1.0.0
  description: A comprehensive Customer Relationship Management (CRM) API with features
    for managing customers, leads, and tasks. Built with Django REST Framework and
    JWT authentication.
  contact:
    name: CRM API Support
    email: support@crm-api.com
  license:
    name: MIT License
paths:
  /api/customers/:
    get:
      operationId: customers_list
      description: Retrieve a paginated list of all customers. Only authenticated
        users can access this endpoint. Admins have full access.
      summary: List all customers
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number for pagination
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - Active
          - Inactive
        description: |-
          * `Active` - Active
          * `Inactive` - Inactive
      tags:
      - Customers
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomerList'
          description: ''
    post:
      operationId: customers_create
      description: Create a new customer. Only admins can create customers.
      summary: Create new customer
      tags:
      - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
            examples:
              CreateCustomer:
                value:
                  name: John Doe
                  email: john.doe@example.com
                  phone: 555-0123
                  company: Acme Corp
                  status: Active
                summary: Create Customer
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
  /api/customers/{id}/:
    get:
      operationId: customers_retrieve
      description: Retrieve detailed information about a specific customer by ID.
      summary: Get customer details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this customer.
        required: true
      tags:
      - Customers
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
    put:
      operationId: customers_update
      description: Update all fields of a customer. Only admins can update customers.
      summary: Update customer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this customer.
        required: true
      tags:
      - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
    patch:
      operationId: customers_partial_update
      description: Update specific fields of a customer. Only admins can update customers.
      summary: Partially update customer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this customer.
        required: true
      tags:
      - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomerRequest'
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
    delete:
      operationId: customers_destroy
      description: Delete a customer. Only admins can delete customers.
      summary: Delete customer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this customer.
        required: true
      tags:
      - Customers
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /api/leads/:
    get:
      operationId: leads_list
      description: Retrieve a paginated list of all leads with customer information.
        Supports filtering by status and searching by title.
      summary: List all leads
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number for pagination
      - in: query
        name: search
        schema:
          type: string
        description: Search leads by title
      - in: query
        name: status
        schema:
          type: string
        description: Filter by lead status (e.g., New, Contacted, Qualified, Lost)
      tags:
      - Leads
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLeadList'
          description: ''
    post:
      operationId: leads_create
      description: Create a new lead. Only admins can create leads.
      summary: Create new lead
      tags:
      - Leads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeadRequest'
            examples:
              CreateLead:
                value:
                  customer: 1
                  title: New sales opportunity
                  description: Potential deal worth $50k
                  status: New
                  value: '50000.00'
                summary: Create Lead
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LeadRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LeadRequest'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'
          description: ''
  /api/leads/{id}/:
    get:
      operationId: leads_retrieve
      description: Retrieve detailed information about a specific lead including related
        customer data.
      summary: Get lead details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lead.
        required: true
      tags:
      - Leads
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'
          description: ''
    put:
      operationId: leads_update
      description: Update all fields of a lead. Only admins can update leads.
      summary: Update lead
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lead.
        required: true
      tags:
      - Leads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeadRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LeadRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LeadRequest'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'
          description: ''
    patch:
      operationId: leads_partial_update
      description: Update specific fields of a lead. Only admins can update leads.
      summary: Partially update lead
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lead.
        required: true
      tags:
      - Leads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLeadRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLeadRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLeadRequest'
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'
          description: ''
    delete:
      operationId: leads_destroy
      description: Delete a lead. Only admins can delete leads.
      summary: Delete lead
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lead.
        required: true
      tags:
      - Leads
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /api/login/:
    post:
      operationId: login_create
      description: Authenticate with username and password to receive access and refresh
        tokens. Rate limited to 5 attempts per minute per IP address.
      summary: Login and obtain JWT tokens
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  example: password123
              required:
              - username
              - password
            examples:
              LoginRequest:
                value:
                  username: john_doe
                  password: password123
                summary: Login Request
      security:
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: JWT access token
                  refresh:
                    type: string
                    description: JWT refresh token
              examples:
                SuccessfulLogin:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGc...
                    refresh: eyJ0eXAiOiJKV1QiLCJhbGc...
                  summary: Successful Login
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '429':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  detail:
                    type: string
                description: Too many login attempts
          description: ''
  /api/register/:
    post:
      operationId: register_create
      description: Create a new user account. Set is_admin to true to create an admin
        user.
      summary: Register a new user
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              RegisterRegularUser:
                value:
                  username: john_doe
                  email: john@example.com
                  password: securePassword123
                  is_admin: false
                summary: Register Regular User
              RegisterAdminUser:
                value:
                  username: admin_user
                  email: admin@example.com
                  password: securePassword123
                  is_admin: true
                summary: Register Admin User
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/tasks/:
    get:
      operationId: tasks_list
      description: Retrieve a list of tasks. Users can only see their own tasks, admins
        can see all tasks. Supports filtering by completion status and searching by
        title.
      summary: List tasks
      parameters:
      - in: query
        name: completed
        schema:
          type: boolean
        description: Filter by completion status (true/false)
      - in: query
        name: page
        schema:
          type: integer
        description: Page number for pagination
      - in: query
        name: search
        schema:
          type: string
        description: Search tasks by title
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
    post:
      operationId: tasks_create
      description: Create a new task and optionally assign it to a user.
      summary: Create new task
      tags:
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
            examples:
              CreateTask:
                value:
                  title: Follow up with customer
                  description: Call customer to discuss proposal
                  due_date: '2025-11-15T10:00:00Z'
                  completed: false
                  assigned_to: 1
                summary: Create Task
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /api/tasks/{id}/:
    get:
      operationId: tasks_retrieve
      description: Retrieve detailed information about a specific task. Users can
        only view their own tasks unless they are admins.
      summary: Get task details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: tasks_update
      description: Update all fields of a task. Users can only update their own tasks.
      summary: Update task
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    patch:
      operationId: tasks_partial_update
      description: Update specific fields of a task. Users can only update their own
        tasks.
      summary: Partially update task
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
            examples:
              MarkTaskComplete:
                value:
                  completed: true
                summary: Mark Task Complete
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    delete:
      operationId: tasks_destroy
      description: Delete a task. Users can only delete their own tasks.
      summary: Delete task
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - Tasks
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/user/me/:
    get:
      operationId: user_me_retrieve
      description: Retrieve information about the currently authenticated user including
        role (admin/user).
      summary: Get current authenticated user
      tags:
      - Authentication
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Full name of the customer
          maxLength: 100
        email:
          type: string
          format: email
          description: Customer email address
          maxLength: 254
        phone:
          type: string
          description: Customer phone number
          maxLength: 20
        company:
          type: string
          description: Company name (optional)
          maxLength: 100
        status:
          allOf:
          - $ref: '#/components/schemas/CustomerStatusEnum'
          description: |-
            Customer status (e.g., Active, Inactive)

            * `Active` - Active
            * `Inactive` - Inactive
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - company
      - created_at
      - email
      - id
      - name
      - phone
      - updated_at
    CustomerRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Full name of the customer
          maxLength: 100
        email:
          type: string
          format: email
          minLength: 1
          description: Customer email address
          maxLength: 254
        phone:
          type: string
          minLength: 1
          description: Customer phone number
          maxLength: 20
        company:
          type: string
          minLength: 1
          description: Company name (optional)
          maxLength: 100
        status:
          allOf:
          - $ref: '#/components/schemas/CustomerStatusEnum'
          description: |-
            Customer status (e.g., Active, Inactive)

            * `Active` - Active
            * `Inactive` - Inactive
      required:
      - company
      - email
      - name
      - phone
    CustomerStatusEnum:
      enum:
      - Active
      - Inactive
      type: string
      description: |-
        * `Active` - Active
        * `Inactive` - Inactive
    Lead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        customer_name:
          type: string
          readOnly: true
          description: Name of the associated customer
        title:
          type: string
          description: Brief title describing the lead
          maxLength: 200
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Estimated monetary value of the lead
        status:
          allOf:
          - $ref: '#/components/schemas/LeadStatusEnum'
          description: |-
            Current status of the lead (e.g., New, Contacted, Qualified, Lost)

            * `Open` - Open
            * `Won` - Won
            * `Lost` - Lost
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        customer:
          type: integer
          description: ID of the customer associated with this lead
      required:
      - created_at
      - customer
      - customer_name
      - id
      - title
      - updated_at
      - value
    LeadRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          description: Brief title describing the lead
          maxLength: 200
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Estimated monetary value of the lead
        status:
          allOf:
          - $ref: '#/components/schemas/LeadStatusEnum'
          description: |-
            Current status of the lead (e.g., New, Contacted, Qualified, Lost)

            * `Open` - Open
            * `Won` - Won
            * `Lost` - Lost
        customer:
          type: integer
          description: ID of the customer associated with this lead
      required:
      - customer
      - title
      - value
    LeadStatusEnum:
      enum:
      - Open
      - Won
      - Lost
      type: string
      description: |-
        * `Open` - Open
        * `Won` - Won
        * `Lost` - Lost
    PaginatedCustomerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
    PaginatedLeadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Lead'
    PaginatedTaskList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    PatchedCustomerRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Full name of the customer
          maxLength: 100
        email:
          type: string
          format: email
          minLength: 1
          description: Customer email address
          maxLength: 254
        phone:
          type: string
          minLength: 1
          description: Customer phone number
          maxLength: 20
        company:
          type: string
          minLength: 1
          description: Company name (optional)
          maxLength: 100
        status:
          allOf:
          - $ref: '#/components/schemas/CustomerStatusEnum'
          description: |-
            Customer status (e.g., Active, Inactive)

            * `Active` - Active
            * `Inactive` - Inactive
    PatchedLeadRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          description: Brief title describing the lead
          maxLength: 200
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Estimated monetary value of the lead
        status:
          allOf:
          - $ref: '#/components/schemas/LeadStatusEnum'
          description: |-
            Current status of the lead (e.g., New, Contacted, Qualified, Lost)

            * `Open` - Open
            * `Won` - Won
            * `Lost` - Lost
        customer:
          type: integer
          description: ID of the customer associated with this lead
    PatchedTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          description: Task title
          maxLength: 200
        description:
          type: string
          minLength: 1
          description: Detailed description of the task
        due_date:
          type: string
          format: date-time
          description: Task due date and time (ISO 8601 format)
        completed:
          type: boolean
          description: Whether the task is completed
        assigned_to:
          type: integer
          nullable: true
          description: ID of the user assigned to this task (optional)
    Task:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        assigned_to_name:
          type: string
          readOnly: true
          description: Username of the user assigned to this task
        title:
          type: string
          description: Task title
          maxLength: 200
        description:
          type: string
          description: Detailed description of the task
        due_date:
          type: string
          format: date-time
          description: Task due date and time (ISO 8601 format)
        completed:
          type: boolean
          description: Whether the task is completed
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        assigned_to:
          type: integer
          nullable: true
          description: ID of the user assigned to this task (optional)
      required:
      - assigned_to_name
      - created_at
      - description
      - due_date
      - id
      - title
      - updated_at
    TaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          description: Task title
          maxLength: 200
        description:
          type: string
          minLength: 1
          description: Detailed description of the task
        due_date:
          type: string
          format: date-time
          description: Task due date and time (ISO 8601 format)
        completed:
          type: boolean
          description: Whether the task is completed
        assigned_to:
          type: integer
          nullable: true
          description: ID of the user assigned to this task (optional)
      required:
      - description
      - due_date
      - title
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          description: User email address
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
        role:
          type: string
          readOnly: true
          description: User role (admin or user)
      required:
      - email
      - id
      - is_staff
      - role
      - username
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
          description: User password (min 8 characters, must include letters and numbers)
        email:
          type: string
          format: email
          minLength: 1
          description: User email address
        is_admin:
          type: boolean
          writeOnly: true
          default: false
          description: Set to true to create an admin user with full permissions
      required:
      - email
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: http://localhost:8000
  description: Local Development Server
tags:
- name: Authentication
  description: User authentication and registration endpoints
- name: Customers
  description: Customer management operations
- name: Leads
  description: Lead tracking and management
- name: Tasks
  description: Task assignment and tracking
